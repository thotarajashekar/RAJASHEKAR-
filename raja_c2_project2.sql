USE modelcarsdb;


-- -------------------------------------------------------------------------------
-- task1.1 find the total number of employees

select count(employeeNumber)  as total_no_of_employees from employees;

-- --------------------------------------------------------------------------------------------------------------------
-- task1.2 list the all employees of basic information
select employeeNUmber,firstName,lastName,email , officeCode from employees;

-- -----------------------------------------------------------------------------------------------------------------
-- task1.3 count no.of employees holding the each job titles


select count(employeeNumber)  as no_of_employees ,jobTitle from employees group by jobTitle;


-- -------------------------------------------------------------------------------------------------------------------
-- task1.4 find the employees who don't have managers(reports to is null)

select employeeNumber,firstName,lastName ,reportsTo from employees   where reportsTo is null ;

-- --------------------------------------------------------------------------------------------------------------------------
-- task1.5 calculate total sales generated by each sales representative

SELECT  jobTitle,sum(orderdetails.quantityOrdered * orderdetails.priceEach) AS totalSales FROM orderdetails 
join employees  where jobTitle= "sales Rep" group by orderNumber ;



######################################################################################################################
-- task1.6  find the most profitble  sales  representative based on total sales.

SELECT  jobTitle,sum(orderdetails.quantityOrdered * orderdetails.priceEach) AS mostprofitlSales
FROM orderdetails join employees  where jobTitle= "sales Rep" group by jobTitle 
order by  mostprofitlSales desc limit 1 ;

##################################################################################################################
-- task 1.7 

-- find the names of all employees who have sold more than the average sales amount  for their office


SELECT e.firstName, e.lastName, ofc.officeCode
FROM employees e
JOIN offices ofc ON e.officeCode = ofc.officeCode
JOIN (SELECT od.orderNumber FROM orderdetails od GROUP BY od.orderNumber) AS emp_orders ON e.employeeNumber = emp_orders.employeeNumber
WHERE emp_orders.orderNumber IN (SELECT od.orderNumber FROM orderdetails od JOIN (SELECT orderNumber, AVG(quantityOrdered * priceEach) AS avg_sales
FROM orderdetails GROUP BY orderNumber) AS avg_sales ON od.orderNumber = avg_sales.orderNumber
WHERE od.quantityOrdered * od.priceEach > avg_sales.avg_sales);


#################################################################################################################
-- TASK(2.1)

-- find the average order amount for each customer

SELECT c.customerName, AVG(o.orderNumber) AS avg_order_amount FROM customers c
INNER JOIN orders o ON c.customerNumber = o.customerNumber GROUP BY c.customerName;
###############################################################################################################

-- TASK(2.2) find the number of orders placed in a month

SELECT  MONTH(orderDate) AS order_month, COUNT(DISTINCT orderNumber) AS num_orders FROM orders GROUP BY  order_month;
####################################################################################################################
-- TASK(2.3) identify the orders that are still(shippment=pending)





SELECT *FROM orders WHERE status = 'pending'
UNION ALL
SELECT *FROM orders WHERE status = 'on Hold';

#####################################################################################################################
-- TASK(2.4)  LIST THE ORDERS along with customers

select  orderNumber,orderDate,c.customerName from orders  o join customers c on o.customerNumber=c.customerNumber;

###################################################################################################################
-- Task(2.5)  retrive the most recent order based on date


SELECT orderNumber,orderDate  as most_recent_date FROM  orders ORDER BY orderDate DESC ;
############################################################################################################
-- TASK(2.6) calculate the total sales  fro each order

SELECT od.orderNumber, sum(od.quantityOrdered * od.priceEach) AS total_sales
FROM orderdetails od
JOIN orders o ON od.orderNumber = o.orderNumber
GROUP BY od.orderNumber;
#################################################################################################################

-- task(2.7) find the high_value based on total sales


SELECT od.orderNumber, sum(od.quantityOrdered * od.priceEach) AS total_sales FROM orderdetails od
JOIN orders o ON od.orderNumber = o.orderNumber GROUP BY od.orderNumber
ORDER BY total_sales DESC LIMIT 1;
#######################################################################################################################
-- task(2.8) list all orders with corresponding order details 


SELECT o.orderNumber, c.customerName AS customer,o.orderDate ,od.productCode,p.productName,od.quantityOrdered,od.priceEach
FROM orders o
JOIN customers c ON o.customerNumber = c.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber
JOIN products p ON od.productCode = p.productCode;

######################################################################################################################

-- Task(2.9) list the most frequently orderd products

SELECT productCode, COUNT(*) AS num_orders FROM orderdetails
GROUP BY productCode ORDER BY num_orders DESC;
#################################################################################################################
-- task(2.10) calculate the total revnue for each  order

SELECT od.orderNumber, SUM(od.quantityOrdered * od.priceEach) AS total_revenue
FROM orderdetails od GROUP BY od.orderNumber;

##############################################################################################################
-- task(2.11) IDENTIFY THE MOST PROFITBLE ORDERS BASED ON TOTAL REVENUE

SELECT  od.orderNumber,sum(od.quantityOrdered * od.priceEach) AS mostprofitble_revenue
FROM orderdetails od  join orders o on od.orderNumber=o.orderNumber group by od.orderNumber
order by  mostprofitble_revenue desc limit 1 ;

############################################################################################################################
--  TASK(2.12) list the all orders with detailed product information

SELECT o.orderNumber, c.customerName AS customer,o.orderDate ,od.productCode,p.productName,od.quantityOrdered,od.priceEach
FROM orders o
JOIN customers c ON o.customerNumber = c.customerNumber
JOIN orderdetails od ON o.orderNumber = od.orderNumber
JOIN products p ON od.productCode = p.productCode;

###################################################################################################################

-- task(2.13) identify the orders with delayed shipping(shippingdate>requireDate)

SELECT o.orderNumber, o.shippedDate, o.requiredDate
FROM orders o WHERE o.shippedDate > o.requiredDate ;

#####################################################################################################

-- Task(2.14)  find the mopst popular product combinations within  orders


SELECT od1.productCode AS p1, od2.productCode AS p2, COUNT(*) AS combined_orders
FROM orderdetails od1
INNER JOIN orderdetails od2 ON od1.orderNumber = od2.orderNumber
WHERE od1.productCode <> od2.productCode 
GROUP BY od1.productCode, od2.productCode
HAVING COUNT(*) > 1 
ORDER BY combined_orders DESC
LIMIT 10; 

###################################################################################################################
-- TASK(2.15)  CALCULATE TOTAL REVENUE FOR ORDER AND IDENTIFY THE TOP 10 MOST PROFIT

SELECT o.orderNumber, SUM(od.quantityOrdered * od.priceEach) AS total_revenue
FROM orders o
INNER JOIN orderdetails od ON o.orderNumber = od.orderNumber
GROUP BY o.orderNumber
ORDER BY total_revenue DESC
LIMIT  10;

#####################################################################################################################

-- TASK(2.16)  CREATE trigger that automatically updates a customers creditt limit after  a new orcder is placed,reducing it by the order total

DROP TRIGGER IF EXISTS update_customer_credit_limit;

DELIMITER //

CREATE TRIGGER update_customer_credit_limit
AFTER INSERT ON orders
FOR EACH ROW
BEGIN
  DECLARE total_order_amount DECIMAL(10,2);

  -- Calculate the total amount for the new order
  SELECT SUM(od.quantityOrdered * od.priceEach) INTO total_order_amount
  FROM orderdetails od
  WHERE od.orderNumber = NEW.orderNumber;

  -- Update the customer's credit limit
  UPDATE customers c
  SET c.creditLimit = c.creditLimit - total_order_amount
  WHERE c.customerNumber = NEW.customerNumber;
END //

DELIMITER ;


################################################################################################################################

  -- Task(2.17) create trigger that logs product quantity changes whenever an order detail is insert or updat
USE modelcarsdb;
DESCRIBE order_detail;
SHOW DATABASES;  -- Check if 'modelcarsdb' is listed
USE modelcarsdb;
SHOW TABLES;     -- Check if 'order_detail' is listed

DELIMITER //

CREATE TRIGGER order_detail_after_insert_update
AFTER INSERT ON order_detail
FOR EACH ROW
BEGIN
    INSERT INTO product_quantity_logs (order_detail_id, product_id, old_quantity, new_quantity, change_type)
    VALUES (NEW.order_detail_id, NEW.product_id, NULL, NEW.quantity, 'INSERT');
END //

DELIMITER ;


DELIMITER //

CREATE TRIGGER order_detail_after_insert_update
AFTER INSERT ON order_detail
FOR EACH ROW
BEGIN
  INSERT INTO product_quantity_logs (order_detail_id, product_id, old_quantity, new_quantity, change_type)
  VALUES (NEW.order_detail_id, NEW.product_id, NULL, NEW.quantity, 'INSERT');
END //

DELIMITER ;

##################################################################################################################################################
/*Task 3-Conclusion

Summarize all interpretations obtained from all the tasks provided in Sprints 9 and 10. Provide final business conclusions to support your analysis for the entire project

Prepare a PowerPoint presentation with project requirements, findings from the analysis summary, and business conclusions (Use a maximum of 15 slides)*/



/* Slide 1: Title Slide
Title: Project: [Data-Driven Analytics Project] - Final Analysis and Recommendations
Subtitle: Sprints 9 & 10 Summary
Company Logo: (optional)
Speaker Notes:
Good morning/afternoon everyone. Today, we'll present the final analysis and recommendations for the [Data-Driven Analytics Project] project, focusing on key findings from Sprints 9 and 10.

Slide 2: Project Overview
Image: Brief visual representing the project (e.g., flowchart, system image)
Bullet Points:

Briefly explain the project's goals and objectives.
Mention the project methodology used (e.g., Agile, Waterfall).
Speaker Notes:
This slide provides a high-level overview of the project. We'll discuss what we're aiming to achieve and how we're approaching it.
Slide 3: Sprints 9 & 10 Focus
Image: Split image showing key tasks of Sprints 9 and 10.
Bullet Points:

Briefly describe the main areas of focus for Sprints 9 and 10.
Mention the type of analysis conducted (e.g., data analysis, user testing).
Speaker Notes:
These sprints concentrated on [mention key areas]. We carried out [mention type of analysis] to uncover deeper insights.
Slide 4: Key Findings - [Area 1]
Image: Chart, graph, or image representing findings for Area 1.
Bullet Points:

List the most important findings related to Area 1.
Briefly explain the significance of each finding.
Speaker Notes:
Our analysis of Area 1 revealed [mention key findings]. This is important because [explain significance].
Slide 5: Key Findings - [Area 2]
Image: Chart, graph, or image representing findings for Area 2.
Bullet Points:

List the most important findings related to Area 2.
Briefly explain the significance of each finding.
Speaker Notes:
In Area 2, we discovered [mention key findings]. This has implications for [explain significance].
Slide 6: Key Findings - [Area 3]
Image: Chart, graph, or image representing findings for Area 3.
Bullet Points:

List the most important findings related to Area 3.
Briefly explain the significance of each finding.
Speaker Notes:
For Area 3, the key findings include [mention key findings]. The significance lies in [explain significance].
Slide 7: Consolidated Findings Summary
Bullet Points:

Briefly summarize the most impactful findings across all areas.
Highlight any unexpected or surprising insights.
Speaker Notes:
Here’s a summary of our key findings. We found that [mention key takeaways]. Notably, we also discovered [mention surprising insights].
Slide 8: Business Conclusions
Image: Illustration representing the overall project conclusion (e.g., green checkmark for success).
Bullet Points:

State the overall project conclusion (success, needs adjustments, etc.).
Briefly explain the reasoning behind the conclusion.
Speaker Notes:
Based on our analysis, the project [mention overall conclusion - success, needs adjustments]. This conclusion is supported by [explain reasoning].
Slide 9: Recommendations
Image: Lightbulb symbolizing recommendations.
Bullet Points:

List specific recommendations based on the findings.
Prioritize recommendations based on potential impact.
Speaker Notes:
To enhance the project’s value, we recommend [list recommendations]. Our top priority should be [mention most impactful recommendation] first.
Slide 10: Next Steps
Image: Roadmap or timeline image representing next steps.
Bullet Points:

Outline the next steps for implementing the recommendations.
Mention any additional actions required (e.g., resource allocation).
Speaker Notes:
The next steps involve [mention next steps]. Additionally, we need to [mention any additional actions].
Slide 11-14 (Optional): Detailed Findings
Content: Use these slides to delve deeper into specific findings from each focus area (Slides 4-6).
Images: Include additional charts, graphs, or data visualizations for clarity.
Speaker Notes:
These slides offer a more detailed look at the findings from each focus area. Refer to the data for a comprehensive understanding.

Slide 15: Thank You
Company Logo: (optional)
Bullet Point:

Thank the audience for their time.
Speaker Notes:
Thank you for your attention. We’re happy to take any questions you may have. */
